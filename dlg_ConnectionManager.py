# -*- coding: utf-8 -*-
"""
/***************************************************************************
                                 A QGIS plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-03-19
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Jan Vrobel
        email                : vrobel.jan@seznam.cz
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import requests
import json
import tempfile
import shutil
from zipfile import ZipFile

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .layman_utils import ProxyStyle
from qgis.core import QgsSettings, QgsApplication, QgsProject
from qgis.PyQt.QtWidgets import QPushButton, QMessageBox
from qgis.PyQt.QtCore import QUrl
from qgis.PyQt.QtGui import QDesktopServices, QIcon
import threading
from qgis.PyQt.QtWidgets import QDialog, QVBoxLayout
from .dlg_server_form import ServerForm


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "dlg_ConnectionManager.ui")
)


class ConnectionManagerDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, utils, server, laymanUsername, URI, layman, parent=None):
        """Constructor."""
        super(ConnectionManagerDialog, self).__init__(parent)
        app = QtWidgets.QApplication.instance()
        self.setObjectName("ConnectionManagerDialog")
        proxy_style = ProxyStyle(app.style())
        self.setStyle(proxy_style)
        self.setupUi(self)
        self.utils = utils
        self.server = server
        self.laymanUsername = laymanUsername
        self.URI = URI
        self.layman = layman
        self.setUi()

    def setUi(self):
        if self.server or self.layman.current != None:
            self.server = True
            proj = QgsProject.instance()
            self.server, type_conversion_ok = proj.readEntry("Layman", "Server", "")
            name, type_conversion_ok = proj.readEntry("Layman", "Name", "")
        self.utils.recalculateDPI()
        self.pushButton_Connect.setEnabled(False)
        self.pushButton_Add.clicked.connect(self.open_server_form)
        path = self.layman.plugin_dir + os.sep + "server_list.txt"
        servers = self.utils.csvToArray(path)

        for i in range(0, len(servers)):
            if not self.server:
                if (
                    i == len(servers) - 1
                ):  ## vyjimka pro alias na test server bude ostraneno
                    self.comboBox_server.addItem("test HUB")
                else:
                    if len(servers[i]) == 6:
                        self.comboBox_server.addItem(servers[i][5])
                    else:
                        self.comboBox_server.addItem(
                            servers[i][0].replace("www.", "").replace("https://", "")
                        )
            else:
                if not self.layman.loggedThrowProject:
                    if (
                        self.server == servers[i][1]
                        and self.server != "http://157.230.109.174/client"
                    ):
                        self.comboBox_server.addItem(self.server.replace("/client", ""))
                        self.layman.setServers(servers, i)
                        print("loaded name is " + name)
                        self.stored_name = name
                        break
                    elif (
                        self.server == "http://157.230.109.174/client"
                        and servers[i][1] == self.server
                    ):
                        self.comboBox_server.addItem("test HUB")
                        self.layman.setServers(servers, i)
                        print("loaded name is " + name)
                        self.stored_name = name
                        break
                else:
                    if len(servers[i]) == 6:
                        self.comboBox_server.addItem(servers[i][5])
                    else:
                        self.comboBox_server.addItem(
                            servers[i][0].replace("www.", "").replace("https://", "")
                        )

        if self.laymanUsername == "":
            if not self.server:
                self.layman.setServers(servers, 0)  

        self.comboBox_server.currentIndexChanged.connect(
            lambda: self.layman.setServers(servers, self.comboBox_server.currentIndex())
        )
        if os.path.isfile(
            os.getenv("HOME") + os.sep + ".layman" + os.sep + "layman_user.INI"
        ):
            config = self.utils.loadIni()
            if "login" in config["DEFAULT"]:
                if len(config["DEFAULT"]["login"]) > 0:                    
                    self.pushButton_Connect.setEnabled(True)                

            for i in range(0, self.comboBox_server.count()):
                if not self.server:
                    if self.layman.authCfg == "a67e5fd":
                        self.comboBox_server.setCurrentIndex(len(servers) - 1)
                    else:
                        if "server" in config["DEFAULT"]:
                            if self.comboBox_server.itemText(i) == config["DEFAULT"][
                                "server"
                            ].replace("www.", "").replace("https://", ""):
                                self.comboBox_server.setCurrentIndex(i)
        else:
            try:
                os.makedirs(os.getenv("HOME") + os.sep + ".layman")
            except:
                print("layman directory already exists")
            self.pushButton_Connect.setEnabled(True)        
        self.pushButton_close.clicked.connect(lambda: self.close())
        if QgsSettings().value("laymanLastServer") != None:
            self.comboBox_server.setCurrentIndex(
                int(QgsSettings().value("laymanLastServer"))            )
        
        self.pushButton_NoLogin.clicked.connect(
            lambda: self.withoutLogin(servers, self.comboBox_server.currentIndex())
        )
        from pathlib import Path

        registerSuffix = "/accounts/signup/"

        server_file = Path(__file__).with_name("server_list.txt")
        self.servers = {}
        with server_file.open(encoding="utf-8") as f:
            for line in f:
                if not line.strip():
                    continue
                parts = [p.strip() for p in line.split(",")]
                url, alias = parts[0].rstrip("/"), parts[-1]
                self.servers[alias] = url

        def setReg():
            alias = self.comboBox_server.currentText()
            base_url = self.servers.get(alias, alias)
            self.current_register_url = f"{base_url}{registerSuffix}"
            text = self.tr("Register")
            self.pushButton_register.setText(text)

        self.comboBox_server.currentTextChanged.connect(setReg)
        setReg()
        
        self.pushButton_register.clicked.connect(self.open_register_url)
        self.setStyleSheet("#DialogBase {background: #f0f0f0 ;}")        
        self.pushButton_Connect.clicked.connect(self.connect_with_version_check)

        if self.laymanUsername != "":            
            self.setup_logout_mode()
            if self.layman.locale == "cs":
                self.setWindowTitle(
                    "Layman - Přihlášený uživatel: " + self.laymanUsername
                )
            else:
                self.setWindowTitle("Layman - Logged user: " + self.laymanUsername)

        else:            
            self.setup_login_mode()
        self.utils.setAuthCfg(self.layman.authCfg)
        self.show()

    def setup_login_mode(self):        
        self.pushButton_Connect.setText(self.tr("Login"))
        self.pushButton_Connect.setIcon(QIcon(os.path.join(self.layman.plugin_dir, "icons", "login_logged.png")))
        self.pushButton_Connect.setEnabled(True)
        self.pushButton_NoLogin.setEnabled(True)
        self.comboBox_server.setEnabled(True)
        self.pushButton_Connect.setDefault(True)
        self.pushButton_Connect.setAutoDefault(True)
        self.is_logged_in = False

    def setup_logout_mode(self):        
        self.pushButton_Connect.setText(self.tr("Logout"))
        self.pushButton_Connect.setIcon(QIcon(os.path.join(self.layman.plugin_dir, "icons", "logout.png")))
        self.pushButton_Connect.setEnabled(True)
        self.pushButton_NoLogin.setEnabled(False)
        self.comboBox_server.setEnabled(False)
        self.pushButton_Connect.setDefault(True)
        self.pushButton_Connect.setAutoDefault(True)
        self.is_logged_in = True

    def handle_login_logout(self):        
        if self.is_logged_in:
            self.logout()
        else:            
            if hasattr(self, 'stored_name') and self.stored_name:
                self.layman.openAuthLiferayUrl2(self.stored_name)
            else:
                self.layman.openAuthLiferayUrl2()

    def open_register_url(self):
        if hasattr(self, "current_register_url"):
            QDesktopServices.openUrl(QUrl(self.current_register_url))

    def checkUsername(self, name):
        n = name.split("@")
        if len(n[0]) > 0:
            self.pushButton_Connect.setEnabled(True)
            self.layman.Agrimail = name
        else:
            self.pushButton_Connect.setEnabled(False)

    def refreshAfterFailedLogin(self):
        self.pushButton_Connect.setEnabled(True)

    def logout(self):
        self.layman.loggedThrowProject = False
        self.layman.disableEnvironment()
        self.layman.current = None
        self.layman.qfieldReady = False
        self.layman.laymanUsername = ""
        self.layman.textbox.setText("Layman")
        self.close()
        # Reset to login mode after logout
        self.setup_login_mode()

        try:
            QgsProject.instance().crsChanged.disconnect()
        except:
            print("crs changed not connected")
        self.layman.menu_UserInfoDialog.setEnabled(True)
        self.layman.laymanUsername = ""
        self.layman.isAuthorized = False
        self.layman.current = None
        self.layman.server = None
        self.layman.compositeList = []
        self.layman.URI = None
        self.layman.instance = None

        # Clear utils URI to prevent using old server URL in layman_api property
        self.utils.URI = None
        # Clear the cached layman_api instance
        self.utils._layman_api = None

    def withoutLogin(self, servers, i):
        self.layman.menu_CurrentCompositionDialog.setEnabled(False)
        self.layman.isAuthorized = False
        self.layman.URI = servers[i][1]
        self.utils.URI = servers[i][1]
        self.layman.menu_AddLayerDialog.setEnabled(True)
        self.layman.laymanUsername = "browser"
        # Setup logout mode for browser user
        self.setup_logout_mode()
        self.layman.menu_UserInfoDialog.setEnabled(True)
        self.layman.menu_AddMapDialog.setEnabled(True)
        self.layman.instance = None
        threading.Thread(target=lambda: self.layman.fillCompositionDict()).start()
        self.close()

    def open_server_form(self):
        self.server_form_dialog = ServerFormDialog(parent=self)
        self.server_form_dialog.show()

    def connect_with_version_check(self):        
        if self.check_layman_version():            
            self.handle_login_logout()
        else:            
            self.ask_for_downgrade()

    def check_layman_version(self):
        """Check if Layman version on server is compatible (>= 2.0.0)"""
        try:            
            current_index = self.comboBox_server.currentIndex()
            if current_index < 0:
                return True              
            
            path = self.layman.plugin_dir + os.sep + "server_list.txt"
            servers = self.utils.csvToArray(path)
            if current_index >= len(servers):
                return True  
                
            server_url = servers[current_index][1]             
            
            response = requests.get(f"{server_url}/rest/about/version", timeout=5)
            if response.status_code == 200:
                data = response.json()
                layman_version = data.get("about", {}).get("applications", {}).get("layman", {}).get("version", "")
                
                if layman_version:                    
                    return self.compare_versions(layman_version, "2.0.0")
                else:
                    return True 
            else:
                return True  
        except Exception:
            return True  

    def compare_versions(self, version1, version2):
        """Simple version comparison"""
        try:
            v1_parts = [int(x) for x in version1.split('.')]
            v2_parts = [int(x) for x in version2.split('.')]            
            
            max_len = max(len(v1_parts), len(v2_parts))
            v1_parts.extend([0] * (max_len - len(v1_parts)))
            v2_parts.extend([0] * (max_len - len(v2_parts)))
            
            return v1_parts >= v2_parts
        except (ValueError, AttributeError):
            return True  

    def ask_for_downgrade(self):
        """Ask user if they want to downgrade plugin version"""
        current_version = self.utils.getVersion()
        
        msgbox = QMessageBox(
            QMessageBox.Icon.Warning,
            self.tr("Incompatible Plugin Version"),
            self.tr(
                f"The selected server requires Layman plugin version 2.x or lower. "
                f"Your current version is {current_version}. "
                f"Do you want to downgrade the plugin to version 2.x?"
            ),
        )
        msgbox.addButton(self.tr("Downgrade"), QMessageBox.ButtonRole.AcceptRole)
        msgbox.addButton(self.tr("Cancel"), QMessageBox.ButtonRole.RejectRole)
        msgbox.setDefaultButton(QMessageBox.StandardButton.Cancel)
        
        reply = msgbox.exec()
        if reply == QMessageBox.StandardButton.Ok:
            self.downgrade_plugin()

    def downgrade_plugin(self):
        """Downgrade plugin to version 2.x"""
        try:            
            master_url = "https://github.com/hslayers/qgis-layman-plugin/archive/master.zip"
            self.install_plugin(master_url, "downgrade")
        except Exception as e:
            QMessageBox.critical(
                self,
                self.tr("Error"),
                self.tr(f"Failed to downgrade plugin: {str(e)}")
            )

    def install_plugin(self, url, action_type="update"):
        """Install plugin from URL (copied from userInfo dialog)"""
        try:
            save_path = tempfile.gettempdir() + os.sep + "layman.zip"
            self.download_url(url, save_path)

            with ZipFile(save_path, "r") as zipObj:
                zipObj.extractall(tempfile.gettempdir())

            extracted_dir = "qgis-layman-plugin-master"
            source_dir = os.path.join(tempfile.gettempdir(), extracted_dir)
            target_dir = self.layman.plugin_dir

            if os.path.exists(target_dir):
                shutil.rmtree(target_dir)
            
            shutil.copytree(source_dir, target_dir)
            
            # Clean up
            os.remove(save_path)
            shutil.rmtree(source_dir)
            
            if action_type == "downgrade":
                QMessageBox.information(
                    self,
                    self.tr("Plugin Downgraded"),
                    self.tr("Layman plugin was downgraded to version 2.x. Please restart QGIS.")
                )
            else:
                QMessageBox.information(
                    self,
                    self.tr("Plugin Updated"),
                    self.tr("Layman plugin was updated. Please restart QGIS.")
                )
                
        except Exception as e:
            QMessageBox.critical(
                self,
                self.tr("Error"),
                self.tr(f"Failed to install plugin: {str(e)}")
            )

    def download_url(self, url, save_path):
        """Download file from URL (copied from userInfo dialog)"""
        response = requests.get(url, stream=True)
        response.raise_for_status()
        
        with open(save_path, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)


class ServerFormDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle(self.tr("Manage Servers"))
        self.resize(400, 600)

        layout = QVBoxLayout(self)
        self.form = ServerForm(parent=self)
        layout.addWidget(self.form)

        self.setLayout(layout)
